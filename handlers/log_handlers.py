from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from textwrap import dedent

from states import Activity, Food
from storage import get_user_data, update_user_data
from keyboards.inline_keyboards import activity_type_kb, create_food_keyboard
from utils.calculations import calculate_calories_burned
from utils.food_search import search_food

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_water
@router.message(Command('log_water'))
async def cmd_log_water(message: Message, command: CommandObject):
    try:
        water_amount = int(command.args)
    except TypeError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–æ—Ç —Ç–∞–∫: /log_water <–æ–±—ä–µ–º –≤–æ–¥—ã (–º–ª)>')

    user_data = get_user_data(message.from_user.id)
    current_water = user_data.get('water_logged', 0) + water_amount
    update_user_data(message.from_user.id, {'water_logged': current_water})

    await message.answer(f'‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {water_amount} –º–ª –≤–æ–¥—ã.\n–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {current_water} –º–ª.')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_workout
@router.message(Command('log_workout'))
async def cmd_log_workout(message: Message, command: CommandObject, state: FSMContext):
    try:
        time_spent = int(command.args)
    except TypeError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–æ—Ç —Ç–∞–∫: /log_water <–≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω)>')

    await state.update_data(time_spent=time_spent)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', reply_markup=activity_type_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.in_({'gym', 'run', 'cycle', 'swim', 'ping-pong', 'squash'}))
async def process_activity_type(callback: CallbackQuery, state: FSMContext):
    activity_data = await state.get_data()
    time_spent = activity_data.get('time_spent', 0)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 200 –º–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    additional_water = (time_spent // 30) * 200

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_type = callback.data
    calories_burned = calculate_calories_burned(activity_type, time_spent)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    user_id = callback.from_user.id
    current_data = get_user_data(user_id)
    updated_data = {
        'calories_burned': current_data.get('calories_burned', 0) + calories_burned,
        'water_goal': current_data.get('water_goal', 0) + additional_water
    }
    update_user_data(user_id, updated_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        f'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n'
        f'üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned}\n'
        f'üíß –í–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ü–µ–ª–∏: {additional_water} –º–ª'
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_food
@router.message(Command('log_food'))
async def log_food(message: Message, command: CommandObject, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞)
    product_name = command.args

    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ API
    products = search_food(product_name)
    if not products:
        await message.answer('–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(Food.products)
    await state.update_data(products=products)

    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_food_keyboard(products)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=keyboard)
    await state.set_state(Food.selected_product)


@router.callback_query(F.data.startswith('food_'))
async def process_food_selection(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
    product_id = callback.data.split('_')[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    products = user_data.get('products', [])

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    selected_product = next((p for p in products if p['id'] == product_id), None)
    if not selected_product:
        await callback.message.answer('–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    await state.update_data(selected_product=selected_product)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_product["name"]} ({selected_product["brand"]}, {selected_product["quantity"]})\n'
                                  f'–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {selected_product["calories"]} –∫–∫–∞–ª/100–≥\n\n'
                                  f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:')

    await state.set_state(Food.food_quantity)
    await callback.answer()


@router.message(Food.food_quantity)
async def process_food_quantity(message: Message, state: FSMContext):
    try:
        quantity = float(message.text)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
    except TypeError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n–ü—Ä–∏–º–µ—Ä: 150')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    selected_product = user_data.get('selected_product')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
    calories_per_100g = selected_product.get('calories', 0)
    total_calories = (calories_per_100g * quantity) / 100

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    user_id = message.from_user.id
    current_data = get_user_data(user_id)
    updated_data = {
        'calories_logged': current_data.get('calories_logged', 0) + total_calories
    }
    update_user_data(user_id, updated_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∑–∞–ø–∏—Å–∞–Ω!\n\n'
        f'üçé –ü—Ä–æ–¥—É–∫—Ç: {selected_product["name"]}\n'
        f'‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} –≥\n'
        f'üî• –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.2f} –∫–∫–∞–ª'
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

